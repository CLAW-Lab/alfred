import argparse
parser = argparse.ArgumentParser()

# General arguments
parser.add_argument('-lr', '--lr', type=float, default=0.01, help='learning rate')
parser.add_argument('-fs', '--frame-stack', type=int, default=1, help='number of frames to stack')
parser.add_argument('-zffs', '--zero-fill-frame-stack', dest='zero_fill_frame_stack', action='store_true', help='fill frames with zeros when frame stacking on early steps')
parser.add_argument('-fffs', '--first-fill-frame-stack', dest='zero_fill_frame_stack', action='store_false', help='replicate first frame when frame stacking on early steps')
parser.set_defaults(zero_fill_frame_stack=False)
parser.add_argument('-vm', '--visual-model', type=str, default='naturecnn', help='which visual model to use (\'naturecnn\', \'resnet\', or \'maskrcnn\')')
parser.add_argument('-pm', '--policy-model', type=str, default='fc', help='which policy model to use (\'fc\' or \'lstm\')')
parser.add_argument('-fl', '--fc-layers', type=int, default=1, help='number of fc layers')
parser.add_argument('-lhs', '--lstm-hidden-dim', type=int, default=64, help='hidden dimension of lstm layers (only used if not using object embedding as initial hidden state)')
parser.add_argument('-ll', '--lstm-layers', type=int, default=1, help='number of lstm layers')
parser.add_argument('-rcf', '--resnet-conv-feat', dest='resnet_conv_feat', action='store_true', help='use conv feat (skip last two resnet-18 layers)')
parser.add_argument('-rll', '--resnet-last-layers', dest='resnet_conv_feat', action='store_false', help='use second-to-last resnet-18 fc layer')
parser.set_defaults(resnet_conv_feat=True)
parser.add_argument('-pvm', '--pretrained-visual-model', dest='pretrained_visual_model', action='store_true', help='if using resnet-18 or maskrcnn, use pretrained weights')
parser.add_argument('-bvm', '--blank-visual-model', dest='pretrained_visual_model', action='store_false', help='if using resnet-18 or maskrcnn, use blank model')
parser.set_defaults(pretrained_visual_model=True)
parser.add_argument('-fpm', '--freeze-pretrained-model', dest='freeze_pretrained_model', action='store_true', help='if using resnet-18 or maskrcnn, freeze weights')
parser.add_argument('-tpm', '--train-pretrained-model', dest='freeze_pretrained_model', action='store_false', help='if using resnet-18 or maskrcnn, allow weights to change')
parser.set_defaults(freeze_pretrained_model=True)
parser.add_argument('-ei', '--eval-interval', type=int, default=100, help='number of training steps between evaluations')
parser.add_argument('-te', '--train-episodes', type=int, default=10, help='number of episodes to evaluate live on train seen scenes and trajectories')
parser.add_argument('-vse', '--valid-seen-episodes', type=int, default=10, help='number of episodes to evaluate live on validation seen scenes and trajectories')
parser.add_argument('-vue', '--valid-unseen-episodes', type=int, default=10, help='number of episodes to evaluate live on validation unseen scenes and trajectories')
parser.add_argument('-ms', '--max-steps', type=float, default=100000, help='max training gradient steps')
parser.add_argument('-do', '--dropout', type=float, default=0.0, help='dropout prob')
parser.add_argument('-sp', '--save-path', type=str, default=None, help='path (directory) to save models and tensorboard stats')
parser.add_argument('-si', '--save-intermediate', dest='save_intermediate', action='store_true', help='save intermediate checkpoints (once per eval interval)')
parser.add_argument('-nsi', '--no-save-intermediate', dest='save_intermediate', action='store_false', help='don\'t save intermediate checkpoints (once per eval interval)')
parser.set_defaults(save_intermediate=False)
parser.add_argument('-sv', '--save-images-video', dest='save_images_video', action='store_true', help='save images and video (for trajectories, every eval interval)')
parser.add_argument('-nsv', '--no-save-images-video', dest='save_images_video', action='store_false', help='don\'t save images and video (for trajectories, every eval interval)')
parser.set_defaults(save_images_video=False)
parser.add_argument('-lp', '--load-path', type=str, default=None, help='path (.pth) to load model checkpoint from')
parser.add_argument('-g', '--gpu', type=int, default=3, help='GPU to run model on')
'''
parser.add_argument('-sn', '--save-name', type=str, default='model', help='model save name')
parser.add_argument('-id', '--model-id', type=str, default='model', help='model id')
'''

# supervised_find arguments
parser.add_argument('-oed', '--object-embedding-dim', type=int, default=16, help='object embedding dim')
parser.add_argument('-ilo', '--init-lstm-object', dest='init_lstm_object', action='store_true', help='use object embedding to initialize lstm hidden state')
parser.add_argument('-ilz', '--init-lstm-zero', dest='init_lstm_object', action='store_false', help='initialize lstm hidden state to zeros')
parser.set_defaults(init_lstm_object=False)
parser.add_argument('-tf', '--teacher-force', dest='teacher_force', action='store_true')
parser.add_argument('-ntf', '--no-teacher-force', dest='teacher_force', action='store_false')
parser.set_defaults(teacher_force=False)
parser.add_argument('-ct', '--crow-threshold', type=float, default=None, help='crow distance threshold for success on live rollouts')
parser.add_argument('-at', '--action-threshold', type=int, default=None, help='action distance threshold for success on live rollouts')
parser.add_argument('-wt', '--walking-threshold', type=int, default=None, help='walking distance threshold for success on live rollouts')
parser.add_argument('-dp', '--dataset-path', type=str, default=None, help='path (directory) to dataset indexes of trajectories and obj_type_to_index, if using')
parser.add_argument('-hri', '--high-res-images', dest='high_res_images', action='store_true', help='whether the provided dataset uses images from high_res_images directories')
parser.add_argument('-ri', '--raw-images', dest='high_res_images', action='store_false', help='whether the provided dataset uses images from raw_images directories')
parser.set_defaults(high_res_images=False)
parser.add_argument('-dw', '--dataloader-workers', type=int, default=1, help='number of dataloader workers (total workers is this times three, since one for train, valid_seen, and valid_unseen)')
parser.add_argument('-bs', '--batch-size', type=int, default=1, help='batch size of training trajectories')

def parse_args():
    return parser.parse_args()
